#! /usr/bin/env python

import pathlib

# Inherit the parent construction environment
Import("env")

# Limit list of source files to allow Conda build-test to test off the installed package
pytest_source_list = [
    "pyproject.toml",
]

pytest_command = "PYTHONDONTWRITEBYTECODE=1 pytest --junitxml=${TARGET.abspath}"
coverage_command = "coverage xml -o ${TARGETS[1].abspath}"
target = ["test_results.xml", "coverage.xml"]

targets = env.Command(
    target=target,
    source=pytest_source_list,
    action=[
        "${pytest_command} -vvv -n 4 -m 'not systemtest' --cov",
        "${coverage_command}"
    ],
    pytest_command=pytest_command,
    coverage_command=coverage_command
)
env.Alias("pytest", targets)
env.Alias("unittests", targets)
env.Alias("regression", targets)
# Always run pytests in place of a complete source list
env.AlwaysBuild(targets)

target = ["systemtest_results.xml"]
source = pytest_source_list + [str(pathlib.Path("turbo_turtle/tests/test_systemtest.py"))]
targets = env.Command(
    target=target,
    source=source,
    action=[
        "${pytest_command} -v --no-showlocals -n 4 -m systemtest --tb=short --cache-clear"
    ],
    pytest_command=pytest_command
)
env.Alias("systemtest", targets)
env.Alias("regression", targets)
env.AlwaysBuild(targets)

target = ["test_abaqus_python.txt"]
source = [
    "turbo_turtle/_abaqus_python/test_abaqus_utilities.py",
    "turbo_turtle/_abaqus_python/test_mixed_utilities.py",
    "turbo_turtle/_abaqus_python/test_parsers.py",
    "turbo_turtle/_abaqus_python/test_vertices.py",
]
targets = env.Command(
    target=target,
    source=source,
    action=[
        "PYTHONDONTWRITEBYTECODE=1 ${program} python -m unittest discover ${SOURCE.dir.abspath} --verbose 2>&1 | tee ${TARGET.abspath}"
    ],
    program=env["abaqus"]
)
env.Alias("test_abaqus_python", targets)
env.Alias("unittests", targets)
env.Alias("regression", targets)
# Always run pytests in place of a complete source list
env.AlwaysBuild(targets)
