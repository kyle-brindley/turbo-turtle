#! /usr/bin/env python
import SCons.Builder


# Inherit the parent construction environment
Import("env")


def cprofile(
    program: str = "python -m cProfile",
    required: str = "-o ${TARGET.abspath} -m turbo_turtle._main",
    options: str = "",
    selection: str = "turbo-turtle",
    rows: int = 10
) -> SCons.Builder.Builder:
    """cProfile Builder

    .. code-block::
       :caption: action construction

       ${program} ${required} ${options} >/dev/null
       python -c \"import pstats; p = pstats.Stats('${TARGET.abspath}'); p.sort_stats(pstats.SortKey.CUMULATIVE).print_stats('${selection}', ${rows})\""

    :param program: cProfile command line executable
    :param required: cProfile required options
    :param options: Options for the profiled script

    :returns: SCons cProfile Builder
    """
    action = [
        "${program} ${required} ${options} >/dev/null",
        "python -c \"import pstats; p = pstats.Stats('${TARGET.abspath}'); " \
            "p.sort_stats(pstats.SortKey.CUMULATIVE).print_stats('${selection}', ${rows})\""
    ]
    builder = SCons.Builder.Builder(
        action=action,
        program=program,
        required=required,
        options=options,
        selection=selection,
        rows=rows
    )
    return builder


env.Append(BUILDERS={"CProfile": cprofile()})

# Collector alias
target = []

# Package import
target.extend(env.CProfile(
    target=["turbo_turtle_import.cprofile"],
    source=["cProfile.py"],
    required="-o ${TARGET.abspath} ${SOURCE.abspath}"
))

# Help/usage
target.extend(env.CProfile(
    target=["turbo_turtle_help.cprofile"],
    source=["cProfile"],
    options="--help"
))

# Geometry-XYPlot
target.extend(env.CProfile(
    target=["turbo_turtle_geometryxyplot.cprofile", "vase.png"],
    source=["turbo_turtle/tests/vase.csv"],
    options="geometry-xyplot --input-file ${SOURCE.abspath} --output-file ${TARGETS[1].abspath}"
))

env.AlwaysBuild(target)
env.Alias("cProfile", target)
