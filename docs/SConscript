#! /usr/bin/env python
import pathlib

import waves


Import(["env", "project_variables"])


# VVV Sphinx Builder prototype
def sphinx_build(program="sphinx-build", options="", builder="html", tags=""):
    sphinx_builder = Builder(
        action=["${program} ${sphinx_options} -b ${builder} ${TARGET.dir.dir.abspath} ${TARGET.dir.abspath} ${tags}"],
        program=program,
        sphinx_options=options,
        builder=builder,
        tags=tags
    )
    return sphinx_builder
# ^^^ Sphinx Builder prototype


env.Append(SCANNERS=waves.scons_extensions.sphinx_scanner())
env.Append(BUILDERS={"SphinxBuild": sphinx_build(options="-W")})

env.Substfile("conf.py.in", SUBST_DICT=env.SubstitutionSyntax(project_variables))

copy_files = (
    ("README.txt", "#/README.rst"),
    ("CITATION.bib", "#/CITATION.bib"),
    ("LICENSE.txt", "#/LICENSE.txt"),
)
for target, source in copy_files:
    Command(
        target=target,
        source=source,
        action=Copy("$TARGET", "$SOURCE")
    )

# Things required for Sphinx configuration or missed by scanning *.rst and *.txt files
sphinx_configuration_files = [
    "conf.py",
    "references.bib",  # Found in conf.py, which is not currently scanned
    "targets.txt",  # Found in conf.py, which is not currently scanned
    "turboTurtleLogo.png",
    "turbo-turtle-logo.png",
    "_static/custom.css",
    "_static/favicon.ico"
]

sphinx_source_files = [
    "README.rst",
    "SConscript",
    "changelog.rst",
    "citation.rst",
    "cli.rst",
    "devops.rst",
    "external_api.rst",
    "gui.rst",
    "index.rst",
    "installation.rst",
    "internal_api.rst",
    "license.rst",
    "release_philosophy.rst",
    "user.rst",
    "zreferences.rst"
]

# Copy tutorial files to the build/docs directory
tutorial_files_list = [
    pathlib.Path("#/turbo_turtle/tutorials/SConstruct"),
    pathlib.Path("#/turbo_turtle/tutorials/SConscript")
]
copied_file_list = []
for file_path in tutorial_files_list:
    target = f"{file_path.parts[-2]}_{file_path.name}"
    Command(
        target=target,
        source=file_path,
        action=Copy("$TARGET", "$SOURCE")
    )
    copied_file_list.append(target)
sources = sphinx_configuration_files + sphinx_source_files + copied_file_list

html_targets = [f"{pathlib.Path(source).with_suffix('.html')}" for source in sphinx_source_files if source.endswith(".rst")]
html_directory = "html"
html_target = [f"{html_directory}/{target}" for target in html_targets]
html = env.SphinxBuild(
    target=html_target,
    source=sources,
    builder="html"
)
env.Clean(html, [Dir(html_directory)] + sphinx_source_files)
env.Alias(html_directory, html)

# TODO: Combine the two html build logic
internal_directory = "html-internal"
internal_target = [f"{internal_directory}/{target}" for target in html_targets]
internal = env.SphinxBuild(
    target=internal_target,
    source=sources,
    builder="html",
    tags="-t aea"
)
env.Clean(internal, [Dir(internal_directory)] + sphinx_source_files)
env.Alias(internal_directory, internal)

targets = ["man/turbo-turtle.1"]
sources = ["man_index.rst"] + sphinx_configuration_files
man = env.SphinxBuild(
    target=targets,
    source=sources,
    builder="man",
    tags="-t man"
)
env.Clean(man, [Dir("man")] + sources)
env.Alias("man", man)

targets = f"latex/turbo-turtle-{project_variables['version']}.pdf"
sources = sphinx_configuration_files + sphinx_source_files
latexpdf = env.Command(
    target=targets,
    source=sources,
    action="${program} -M latexpdf ${TARGET.dir.dir.abspath} ${TARGET.dir.dir.abspath} ${tags} ${sphinx_options}",
    program="sphinx-build",
    sphinx_options="-W"
)
env.Clean(latexpdf, [Dir("latex")] + sources)
env.Alias("latexpdf", latexpdf)

env.Alias("documentation", html + man + latexpdf)
env.Alias("regression", html + man + latexpdf + internal)
