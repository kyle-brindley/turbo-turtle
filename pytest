#! /usr/bin/env python

import pathlib

# Inherit the parent construction environment
Import("env")

# Limit list of source files to allow Conda build-test to test off the installed package
pytest_source_list = [
    "pyproject.toml",
]

pytest_command = "cd turbo_turtle/ && pytest -n 4"
targets = env.Command(
    target=["coverage.xml", Dir("./coverage")],
    source=pytest_source_list,
    action=[
        (
            "${pytest_command} -vvv -m 'not systemtest' --cov --cov-report=term "
            "--cov-report=xml:${TARGETS[0].abspath} --cov-report=html:${TARGETS[1].abspath}"
        )
    ],
    pytest_command=pytest_command,
)
env.Alias("pytest", targets)
env.Clean("pytest", Dir("./coverage"))
env.Alias("regression", targets)
# Always run pytests in place of a complete source list
env.AlwaysBuild(targets)

# Cubit unit tests
for name, cubit_environment in env["cubit_environments"].items():
    targets = cubit_environment.Command(
        target=[f"test_{name}_results.xml"],
        source=pytest_source_list + ["turbo_turtle/tests/test_cubit_python.py"],
        action=[
            "${pytest_command} ${SOURCES[1].abspath} -vvv -m 'cubit_python' --cov --cov-report=xml:${TARGET.abspath}",
        ],
        pytest_command=pytest_command,
    )
    cubit_environment.Alias("test_cubit_python", targets)
    cubit_environment.Alias("regression", targets)
    # Always run pytests in place of a complete source list
    cubit_environment.AlwaysBuild(targets)

# Abaqus unit tests
for name, path in env["abaqus_matrix"].items():
    source = [
        "turbo_turtle/_abaqus_python/turbo_turtle_abaqus/test_abaqus_utilities.py",
        "turbo_turtle/_abaqus_python/turbo_turtle_abaqus/test_mixed_utilities.py",
        "turbo_turtle/_abaqus_python/turbo_turtle_abaqus/test_parsers.py",
        "turbo_turtle/_abaqus_python/turbo_turtle_abaqus/test_vertices.py",
    ]
    targets = env.Command(
        target=[f"test_{name}_python.txt"],
        source=source,
        action=[
            (
                "PYTHONDONTWRITEBYTECODE=1 ${program} python -m unittest discover ${SOURCE.dir.abspath} --verbose "
                "2>&1 | tee ${TARGET.abspath}"
            )
        ],
        program=path
    )
    env.Alias("test_abaqus_python", targets)
    env.Alias("regression", targets)
    # Always run pytests in place of a complete source list
    env.AlwaysBuild(targets)

# System tests
# TODO: test against a matrix of Abaqus/Cubit versions
# https://re-git.lanl.gov/aea/python-projects/turbo-turtle/-/issues/233
source = pytest_source_list + [str(pathlib.Path("turbo_turtle/tests/test_system.py"))]
targets = env.Command(
    target=["systemtest_results.xml"],
    source=source,
    action=[
        (
            "${pytest_command} -v --no-showlocals -m 'systemtest and gmsh' --tb=short --cache-clear --cov "
            "--cov-report=xml:${TARGET.abspath} --abaqus-command=${abaqus_command} --cubit-command=${cubit_command}"
        ),
    ],
    pytest_command=pytest_command,
    abaqus_command="/apps/abaqus/Commands/abq2023",
    cubit_command="/apps/Cubit-16.16/cubit",
)
env.Alias("systemtest", targets)
env.Alias("systemtests", targets)
env.Alias("regression", targets)
env.AlwaysBuild(targets)
