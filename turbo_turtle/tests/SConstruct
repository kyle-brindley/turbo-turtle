#! /usr/bin/env python
import os
import inspect
import pathlib

import waves

import turbo_turtle

AddOption(
    "--uninstalled",
    dest="uninstalled",
    default=False,
    action="store_true",
    help="Boolean to use the uninstalled, repository Turbo-Turtle command 'python -m turbo_turtle.main'. " \
         "(default: '%default')"
)

project_configuration = pathlib.Path(inspect.getfile(lambda: None))
project_directory = project_configuration.parent

env = Environment(
    ENV=os.environ.copy(),
    uninstalled=GetOption("uninstalled"),
)
env["abaqus"] = waves.scons_extensions.add_program(["/apps/abaqus/Commands/abq2023", "abq2023"], env)
env["cubit"] = waves.scons_extensions.add_cubit(["/apps/Cubit-16.12/cubit", "cubit"], env)
env["turbo_turtle"] = "python -m turbo_turtle.main" if env["uninstalled"] else "turbo-turtle"
env.Append(BUILDERS={
    # API Builders
    "geometry_api": turbo_turtle.scons_extensions._api_builder("geometry"),
    "geometry_xyplot_api": turbo_turtle.scons_extensions._api_builder("geometry-xyplot"),
    "merge_api": turbo_turtle.scons_extensions._api_builder("merge"),
    # CLI builders
    "geometry_cli": turbo_turtle.scons_extensions.geometry(
        program=env["turbo_turtle"],
        abaqus_command=[env['abaqus']],
        cubit_command=[env['cubit']],
        options="--model-name ${model_name} --part-name ${part_name}"
    ),
    "geometry_xyplot_cli": turbo_turtle.scons_extensions.geometry_xyplot(
        program=env["turbo_turtle"],
        abaqus_command=[env['abaqus']],
        cubit_command=[env['cubit']],
        options="--model-name ${model_name} --part-name ${part_name}"
    ),
    "merge_cli": turbo_turtle.scons_extensions.merge(
        program=env["turbo_turtle"],
        abaqus_command=[env['abaqus']],
        cubit_command=[env['cubit']],
        options="--model-name ${model_name} --part-name ${part_name} --merged-model-name ${merged_model_name}"
    ),
    # Deprecated CLI builders
    # TODO: Remove these builders for version 1.0
    "TurboTurtleSphere":
        turbo_turtle.scons_extensions.turbo_turtle_sphere(program=env["turbo_turtle"],
                                                          abaqus_command=[env['abaqus']]),
    "TurboTurtlePartition":
        turbo_turtle.scons_extensions.turbo_turtle_partition(program=env["turbo_turtle"],
                                                             abaqus_command=[env['abaqus']]),
    "TurboTurtleSphereCubit":
        turbo_turtle.scons_extensions.turbo_turtle_sphere(program=env["turbo_turtle"],
                                                          cubit_command=[env['cubit']], cubit=True),
    "TurboTurtlePartitionCubit":
        turbo_turtle.scons_extensions.turbo_turtle_partition(program=env["turbo_turtle"],
                                                             cubit_command=[env['cubit']], cubit=True),
})

# API builders
cubit_flag = [
    (False, ".cae", "api"),  # Use Abaqus as backend
    (False, ".cae", "cli"),  # Use Abaqus as backend
    (True, ".cub", "api"),  # Use Cubit as backend
    (True, ".cub", "cli"),  # Use Cubit as backend
]
for flag, extension, interface in cubit_flag:
    if interface == "cli":
        cubit_option = "--cubit" if flag is True else ""
    else:
        cubit_option = flag

    # Geometry
    builder = f"geometry_{interface}"
    part_name = [f"scons-{interface}-vase"]
    env["BUILDERS"][builder](env,
        target=[f"scons-{interface}-vase{extension}"],
        source=[str(project_directory / "vase.csv")],
        cubit=cubit_option,
        output_file="${TARGET.abspath}",
        model_name=f"scons-{interface}-vase",
        part_name=" ".join(part_name) if interface == "cli" else part_name
    )
    part_name = [f"scons-{interface}-washer"]
    env["BUILDERS"][builder](env,
        target=[f"scons-{interface}-washer{extension}"],
        source=[str(project_directory / "washer.csv")],
        cubit=cubit_option,
        output_file="${TARGET.abspath}",
        model_name=f"scons-{interface}-washer",
        part_name=" ".join(part_name) if interface == "cli" else part_name
    )
    part_name = [f"scons-{interface}-vase", f"scons-{interface}-washer"]
    env["BUILDERS"][builder](env,
        target=[f"scons-{interface}-multi-part{extension}"],
        source=[
            str(project_directory / "vase.csv"),
            str(project_directory / "washer.csv")
        ],
        cubit=cubit_option,
        output_file="${TARGET.abspath}",
        model_name=f"scons-{interface}-multi-part",
        part_name=" ".join(part_name) if interface == "cli" else part_name
    )

    # Geometry-XY Plot
    builder = f"geometry_xyplot_{interface}"
    part_name = [f"scons-{interface}-vase"]
    env["BUILDERS"][builder](env,
        target=[f"scons-{interface}-vase{extension}.png"],
        source=[str(project_directory / "vase.csv")],
        cubit=cubit_option,
        output_file="${TARGET.abspath}",
        part_name=" ".join(part_name) if interface == "cli" else part_name
    )
    part_name = [f"scons-{interface}-washer"]
    env["BUILDERS"][builder](env,
        target=[f"scons-{interface}-washer{extension}.png"],
        source=[str(project_directory / "washer.csv")],
        cubit=cubit_option,
        output_file="${TARGET.abspath}",
        part_name=" ".join(part_name) if interface == "cli" else part_name
    )
    part_name = [f"scons-{interface}-vase", f"scons-{interface}-washer"]
    env["BUILDERS"][builder](env,
        target=[f"scons-{interface}-multi-part{extension}.png"],
        source=[
            str(project_directory / "vase.csv"),
            str(project_directory / "washer.csv")
        ],
        cubit=cubit_option,
        output_file="${TARGET.abspath}",
        part_name=" ".join(part_name) if interface == "cli" else part_name
    )

    # Sphere
    # Cylinder
    # Partition
    # Mesh
    # Image
    # Merge
    builder = f"merge_{interface}"
    model_name = [f"scons-{interface}-vase", f"scons-{interface}-washer"]
    part_name = [f"scons-{interface}-vase", f"scons-{interface}-washer"]
    env["BUILDERS"][builder](env,
        target=[f"scons-{interface}-merge-multi-part{extension}"],
        source=[f"scons-{interface}-vase{extension}", f"scons-{interface}-washer{extension}"],
        cubit=cubit_option,
        output_file="${TARGET.abspath}",
        model_name=" ".join(model_name) if interface == "cli" else model_name,
        part_name=" ".join(part_name) if interface == "cli" else part_name,
        merged_model_name=f"scons-{interface}-merge-multi-part"
    )

# Deprecated CLI builders
# TODO: Remove these builders for version 1.0
env.TurboTurtleSphere(
    target=["scons-deprecated-sphere.cae"],
    source=[str(project_configuration)],
    inner_radius=1.,
    outer_radius=2.,
    model_name="sphere",
    part_name="sphere"
)
env.TurboTurtlePartition(
    target=["scons-deprecated-partition.cae"],
    source=["scons-deprecated-sphere.cae"],
    model_name="sphere",
    part_name="sphere"
)
env.TurboTurtleSphereCubit(
    target=["scons-deprecated-sphere.cub"],
    source=[str(project_configuration)],
    inner_radius=1.,
    outer_radius=2.,
    model_name="sphere",
    part_name="sphere"
)
env.TurboTurtlePartitionCubit(
    target=["scons-deprecated-partition.cub"],
    source=["scons-deprecated-sphere.cub"],
    model_name="sphere",
    part_name="sphere"
)

waves.scons_extensions.project_help_message()
